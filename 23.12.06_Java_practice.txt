23.12.06 자바 기초

기본 자료형 -> 참조 자료형 => new 해당클래스명 -> 객체
             스택 메모리 => 힙 메모리(new 사용 시 힙 메모리에 저장)

비트 연산자의 활용
- XOR과 AND를 조합해 덧셈, 뺄셈으로 활용
- 시프트 연산자를 활용해 곱셈, 나눗셈으로 활용
- 이런식으로 컴퓨터 연산에서 비트연산자가 활용된다는 것 정도만 숙지

⭐제어문
- 프로그래밍의 존재 이유와 목적을 꼽으라고 한다면 사용자의 input에 따라 달라지는 output을 자동화 하기 위함이라 할 수 있다.
    - 이를 위해 필요한 것은 ~한 input인 경우, ~한 output을 만들어 내는 조건문
    - 그것이 반복되는 연산과정을 자동화 하기 위한 반복문
- 조건문과 반복문을 포괄하는 명칭으로 프로그램의 순차적인 흐름을 제어하므로 이때 사용되는 명령문을 제어문이라함
- 제어문에 속하는 명령문들은 중괄호({})로 둘러싸여 있으며, 이러한 ~

⭐제어문 - 조건문
- if 문
- if / else 문
- if / else if / else 문
- Switch 문

⭐삼항연산자
- 문법
    - 결과값 = 조건식 ? 반환값1 : 반환값2
- 물음표(?) 앞에 조건식에 따라 결과값이 참(true)이면 반환값1을 반환하고, 결과값이 거짓(false)이면 반환값2를 반환
- 자바에서는 간단한 if/else 문은 삼항 연산자를 이용하여 간결하게 표현

Switch문
- 기본 문법
    - switch (input) {
        case 값1:
            조건 값이 값1일 때 실행하고자 하는 명령문;
            break; //switch문을 빠져나가는 문구
        case 값2:
            조건 값이 값2일 때 실행하고자 하는 명령문;
            break;
            ...
        default:
            조건 값이 어떠한 case 절에도 해당하지 않을 때 실행하고자 하는 명령문;
            break;
    }
    - if / else if / else를 사용해도 동일하나, 가독성이 졸고 특정한 조건의 경우가 열거형으로 몇가지로 정해져 있을 때 주로 사용
    - 단점 : 범위 지정이 불가하다.
    - 그렇기 때문에 실제적인 값으로 비교 가능한 input에 사용한다.

⭐제어문 - 반복문(loop)
- while 문
- do / while 문
- for 문
- Enhanced for 문

while 문
- while (조건식) {
    조건식의 결과가 참인 동안 반복적으로 실행하고자 하는 명령문;
}
- while 문은 특정 조건을 만족할 때까지 계속해서 주어진 명령문을 반복
    - while 문 내부에 조건을 false로 만드는 로직이 존재하지 않을 경우엔 프로그램이 무한 루프(infinite loop)
    - 무한 loop가 default

