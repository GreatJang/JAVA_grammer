23.12.12 자바 기초
⭐

- ⭐자료형 - 리스트(list)
    - 배열과 유사한 자료구조는 ArrayList
        - 동일한 데이터 타입
        - 인덱스에 의한 접근

    - 배열과의 차이
        - 리스트의 사이즈는 동적으로 할당
        - 데이터 중간 삽입 가능한 구조로 인해 삽입/삭제시 성능 저하
        - 지속적인 배열사이즈 복사로 인한 삽입 성능 저하

    - 배열복사 구조
        - 최초 크기 10
        - 사이즈가 늘어날 때마다 기존의 배열에서 대략1.5배 만큼 새로운 배열을 만들고, 배열복사 과정

- 자료형 - 리스트(list) 주요 메서드
    - add(E element)
        - 리스트 끝에 지정된 요소룰 추가
    - add(int index, E element)
        - 특정 index 위치에 요소를 삽입
    - addAll(Collection<? extends E>c)
        - 특정 리스트에 다른 특정 리스트 요소를 모두 add
    - get(int index)
        - 특정 위치에 있는 요소를 반환
    - ⭐size()
        - 리스트 안에 있는 요소의 수를 반환
    - ⭐isEmpty()
        - 리스트가 비어 있는지 여부를 반환
    - set(int index, E element)
        - 특정 위치에 있는 요소를 지정된 요소로 대체
    - contains(E element)
        - contains 메소드는 리스트 안에 해당 항목이 있는지를 판별하여 그 결과를 boolean으로 리턴
    - remove(value)
        - 리스트에서 해당 항목이 발견되는 맨 앞의 value(객체타입)를 삭제하고 삭제한 결과(true,false)를 리턴
    - remove(인덱스)
        - 해당 인덱스의 항목을 삭제하고 삭제된 항목을 리턴
    - clear()
        - 모든 요소를 제거
    - indexOf(E element)
        - 지정된 요소가 위치한 인덱스 중 첫번째 값을 반환
        - 리스트가 해당 요소를 포함하지 않으면 -1을 반환

    리스트의 출력
        - 이미 toString을 상속하여 내부적으로 호출하고 있으므로 리스트를 출력할때는 배열과는 다르게 별도로 to String



⭐set, map은 순서가 없다. 원안에 값이 들어가 있다고 생각.
자바 index는 바로 찾아갈 수 있다. 복잡도가 O(1)

- 자료형 - 리스트(list)의 정렬
    - 컬렉션 클래스를 이용한 정렬
        - Collection은 List, Set, Queue등의 상위 인터페이스
            - Collection에 내장된 메서드는 하위 객체에서 사용가능
        - List<Integer> numbers = new ArrayList<>();
            - 오름차순
                - Collection.sort(numbers);
            - 내림차순
                - Collection.sort(numbers, Comparator.reverseOrder());
    - 리스트내의 내장함수 이용
        - List<Integer> numbers = new ArrayList<>();
            - 오름차순
                - numbers.sort(Comparator.naturalOrder());
            - 내림차순
                - numbers.sort(Comparator.reverseOrder());

자료형 - map
- map은 키와 값(value)의 쌍으로 이루어진 데이터를 저장하는 자료구조
- 성능이 좋다.
- 해시값


자료형 - set
- set은 수학에서의 집합과 유사한 성질을 지닌 자료형
- HashSet이 대표적인 set
- 중복된 값은 존재하지 않는다.
- 순서가 없다.
    - 인덱싱을 통해 자료형의 값을 얻을 수 없다.
    - Map과 마찬가지로 Enhanced for문, Iterator 활용

- Set<Integer> s1 = new HashSet<>(Arrays.asList(1,2,3,4,5,6));

자료형 - Stack
-후입선출(LIFO) 즉, 가장 나중에 저장된 (push) 데이터가 가장 먼저 인출(pop)되는 자료 구조

스택의 생성
- Stack<Integer> st = new Stack<>();

주요메서드
- push
- pop()
- peek()
- empty()

나중 데이터를 먼저 꺼내서 비교해야 하는 작업일 경우 stack 사용
- 예시
페이지 뒤로가기
괄호 짝 맞추기

List : 인덱스로 출력
Set, Map : enhanced for문 or Iterator로 출력